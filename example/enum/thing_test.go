// Code generated by go generate; DO NOT EDIT.
// This file was generated at
// 2020-07-12T00:01:07-03:00
// by go-enum

package enum_test

import (
	"encoding/json"
	"fmt"
	"testing"

	"github.com/lggomez/go-enum/example/enum"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

type fooThing struct {
	TestValue enum.Thing `json:"Thing"`
}

type fooThingOmitEmpty struct {
	TestValue enum.Thing `json:"Thing,omitempty"`
}

type fooThingPtr struct {
	TestValue *enum.Thing `json:"Thing"`
}

type fooThingPtrOmitEmpty struct {
	TestValue *enum.Thing `json:"Thing,omitempty"`
}

func TestThing_MarshalJSON(t *testing.T) {
	t.Run("Marshal_AnnonStructField", func(t *testing.T) {
		v := struct {
			A enum.Thing `json:"Thing"`
		}{enum.ThingFoo}
		data, err := json.Marshal(&v)
		require.Nil(t, err)
		assert.EqualValues(t, fmt.Sprintf(`{"Thing":"%s"}`, v.A.String()), string(data))
	})
	t.Run("Marshal_StructField", func(t *testing.T) {
		v := fooThing{TestValue: enum.Thing{}}
		data, err := json.Marshal(v)
		require.Nil(t, err)
		assert.EqualValues(t, fmt.Sprintf(`{"Thing":"%s"}`, v.TestValue.String()), string(data))
	})
	t.Run("Marshal_OmitEmptyStruct", func(t *testing.T) {
		// encoding/json ignores omitempty on struct zero values
		// https://github.com/golang/go/issues/11939
		v := fooThingOmitEmpty{}
		data, err := json.Marshal(v)
		require.Nil(t, err)
		assert.EqualValues(t, `{"Thing":""}`, string(data))
	})
	t.Run("Marshal_StructFieldPtr", func(t *testing.T) {
		vPtr := fooThingPtr{TestValue: &enum.Thing{}}
		data, err := json.Marshal(vPtr)
		require.Nil(t, err)
		assert.EqualValues(t, `{"Thing":""}`, string(data))
	})
	t.Run("Marshal_StructFieldPtr", func(t *testing.T) {
		dt := enum.ThingFoo
		vPtr := fooThingPtr{TestValue: &dt}
		data, err := json.Marshal(vPtr)
		require.Nil(t, err)
		assert.EqualValues(t, fmt.Sprintf(`{"Thing":"%s"}`, vPtr.TestValue.String()), string(data))
	})
	t.Run("Marshal_StructFieldNilPtr", func(t *testing.T) {
		vPtr := fooThingPtr{}
		data, err := json.Marshal(vPtr)
		require.Nil(t, err)
		assert.EqualValues(t, `{"Thing":null}`, string(data))
	})
	t.Run("Marshal_OmitEmptyStructPtr", func(t *testing.T) {
		vPtr := fooThingPtrOmitEmpty{}
		data, err := json.Marshal(vPtr)
		require.Nil(t, err)
		assert.EqualValues(t, `{}`, string(data))
	})
}

func TestThing_UnmarshalJSON(t *testing.T) {
	t.Run("Unmarshal_InvalidValue", func(t *testing.T) {
		data := `{"Thing":"732b5fc4-23bb-421a-a9e8-30df06d6506b"}`
		rawData := []byte(data)

		v := struct {
			A enum.Thing `json:"Thing"`
		}{enum.ThingFoo}
		err := json.Unmarshal(rawData, &v)
		require.NotNil(t, err)
	})
	t.Run("Unmarshal_AnnonStructField", func(t *testing.T) {
		data := `{"Thing":"Foo"}`
		rawData := []byte(data)

		v := struct {
			A enum.Thing `json:"Thing"`
		}{enum.ThingFoo}
		err := json.Unmarshal(rawData, &v)
		require.Nil(t, err)
		assert.EqualValues(t, "Foo", v.A.String())
	})
	t.Run("Unmarshal_StructField", func(t *testing.T) {
		data := `{"Thing":"Foo"}`
		rawData := []byte(data)

		v := fooThing{}
		err := json.Unmarshal(rawData, &v)
		require.Nil(t, err)
		assert.EqualValues(t, "Foo", v.TestValue.String())
	})
	t.Run("Unmarshal_OmitEmptyStruct", func(t *testing.T) {
		data := `{"Thing":null}`
		rawData := []byte(data)

		v := fooThingOmitEmpty{}
		err := json.Unmarshal(rawData, &v)
		require.NoError(t, err)
	})
	t.Run("Unmarshal_StructFieldPtr", func(t *testing.T) {
		data := `{"Thing":"Foo"}`
		rawData := []byte(data)

		vPtr := fooThingPtr{}
		err := json.Unmarshal(rawData, &vPtr)
		require.Nil(t, err)
		assert.EqualValues(t, "Foo", vPtr.TestValue.String())
	})
	t.Run("Unmarshal_StructFieldNilPtr", func(t *testing.T) {
		data := `{"Thing":null}`
		rawData := []byte(data)

		vPtr := fooThingPtr{}
		err := json.Unmarshal(rawData, &vPtr)
		require.Nil(t, err)
		assert.Nil(t, vPtr.TestValue)
	})
}

func TestThing_EmptyValues(t *testing.T) {
	t.Run("StructField", func(t *testing.T) {
		v := fooThing{TestValue: enum.Thing{}}
		data, err := json.Marshal(v)
		require.NoError(t, err)
		assert.EqualValues(t, fmt.Sprintf(`{"Thing":"%s"}`, v.TestValue.String()), string(data))

		v2 := fooThing{}
		err = json.Unmarshal(data, &v2)
		require.NoError(t, err) // empty field

		v3 := fooThing{}
		err = json.Unmarshal(data, &v3)
		require.NoError(t, err)
	})
	t.Run("PtrField", func(t *testing.T) {
		v := fooThingPtr{TestValue: nil}
		data, err := json.Marshal(v)
		require.NoError(t, err)
		assert.EqualValues(t, fmt.Sprintf(`{"Thing":%s}`, "null"), string(data))

		v2 := fooThing{}
		err = json.Unmarshal(data, &v2)
		require.NoError(t, err) // empty field

		v3 := fooThing{}
		err = json.Unmarshal(data, &v3)
		require.NoError(t, err)
	})
}

func TestThing_ForEach(t *testing.T) {
	j := 0
	enum.EnumThing.ForEach(func(i int, enumValue enum.Thing) {
		j++
		value, found := enum.ThingFromValue(enumValue.String(), false)
		assert.True(t, found)
		assert.True(t, value == enumValue)
	})
	assert.EqualValues(t, enum.EnumThing.Len(), j)
}
