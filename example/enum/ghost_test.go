// Code generated by go generate; DO NOT EDIT.
// This file was generated at
// 2020-07-12T00:16:54-03:00
// by go-enum

package enum_test

import (
	"encoding/json"
	"fmt"
	"testing"

	"github.com/lggomez/go-enum/example/enum"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

type fooGhost struct {
	TestValue enum.Ghost `json:"Ghost"`
}

type fooGhostOmitEmpty struct {
	TestValue enum.Ghost `json:"Ghost,omitempty"`
}

type fooGhostPtr struct {
	TestValue *enum.Ghost `json:"Ghost"`
}

type fooGhostPtrOmitEmpty struct {
	TestValue *enum.Ghost `json:"Ghost,omitempty"`
}

func TestGhost_MarshalJSON(t *testing.T) {
	t.Run("Marshal_AnnonStructField", func(t *testing.T) {
		v := struct {
			A enum.Ghost `json:"Ghost"`
		}{enum.GhostBlinky}
		data, err := json.Marshal(&v)
		require.Nil(t, err)
		assert.EqualValues(t, fmt.Sprintf(`{"Ghost":"%s"}`, v.A.String()), string(data))
	})
	t.Run("Marshal_StructField", func(t *testing.T) {
		v := fooGhost{TestValue: enum.Ghost{}}
		data, err := json.Marshal(v)
		require.Nil(t, err)
		assert.EqualValues(t, fmt.Sprintf(`{"Ghost":"%s"}`, v.TestValue.String()), string(data))
	})
	t.Run("Marshal_OmitEmptyStruct", func(t *testing.T) {
		// encoding/json ignores omitempty on struct zero values
		// https://github.com/golang/go/issues/11939
		v := fooGhostOmitEmpty{}
		data, err := json.Marshal(v)
		require.Nil(t, err)
		assert.EqualValues(t, `{"Ghost":""}`, string(data))
	})
	t.Run("Marshal_StructFieldPtr", func(t *testing.T) {
		vPtr := fooGhostPtr{TestValue: &enum.Ghost{}}
		data, err := json.Marshal(vPtr)
		require.Nil(t, err)
		assert.EqualValues(t, `{"Ghost":""}`, string(data))
	})
	t.Run("Marshal_StructFieldPtr", func(t *testing.T) {
		dt := enum.GhostBlinky
		vPtr := fooGhostPtr{TestValue: &dt}
		data, err := json.Marshal(vPtr)
		require.Nil(t, err)
		assert.EqualValues(t, fmt.Sprintf(`{"Ghost":"%s"}`, vPtr.TestValue.String()), string(data))
	})
	t.Run("Marshal_StructFieldNilPtr", func(t *testing.T) {
		vPtr := fooGhostPtr{}
		data, err := json.Marshal(vPtr)
		require.Nil(t, err)
		assert.EqualValues(t, `{"Ghost":null}`, string(data))
	})
	t.Run("Marshal_OmitEmptyStructPtr", func(t *testing.T) {
		vPtr := fooGhostPtrOmitEmpty{}
		data, err := json.Marshal(vPtr)
		require.Nil(t, err)
		assert.EqualValues(t, `{}`, string(data))
	})
}

func TestGhost_UnmarshalJSON(t *testing.T) {
	t.Run("Unmarshal_InvalidValue", func(t *testing.T) {
		data := `{"Ghost":"e259662b-1560-45a9-bed4-5ae2c4fdfe3d"}`
		rawData := []byte(data)

		v := struct {
			A enum.Ghost `json:"Ghost"`
		}{enum.GhostBlinky}
		err := json.Unmarshal(rawData, &v)
		require.NotNil(t, err)
	})
	t.Run("Unmarshal_AnnonStructField", func(t *testing.T) {
		data := `{"Ghost":"Blinky"}`
		rawData := []byte(data)

		v := struct {
			A enum.Ghost `json:"Ghost"`
		}{enum.GhostBlinky}
		err := json.Unmarshal(rawData, &v)
		require.Nil(t, err)
		assert.EqualValues(t, "Blinky", v.A.String())
	})
	t.Run("Unmarshal_StructField", func(t *testing.T) {
		data := `{"Ghost":"Blinky"}`
		rawData := []byte(data)

		v := fooGhost{}
		err := json.Unmarshal(rawData, &v)
		require.Nil(t, err)
		assert.EqualValues(t, "Blinky", v.TestValue.String())
	})
	t.Run("Unmarshal_OmitEmptyStruct", func(t *testing.T) {
		data := `{"Ghost":null}`
		rawData := []byte(data)

		v := fooGhostOmitEmpty{}
		err := json.Unmarshal(rawData, &v)
		require.NoError(t, err)
	})
	t.Run("Unmarshal_StructFieldPtr", func(t *testing.T) {
		data := `{"Ghost":"Blinky"}`
		rawData := []byte(data)

		vPtr := fooGhostPtr{}
		err := json.Unmarshal(rawData, &vPtr)
		require.Nil(t, err)
		assert.EqualValues(t, "Blinky", vPtr.TestValue.String())
	})
	t.Run("Unmarshal_StructFieldNilPtr", func(t *testing.T) {
		data := `{"Ghost":null}`
		rawData := []byte(data)

		vPtr := fooGhostPtr{}
		err := json.Unmarshal(rawData, &vPtr)
		require.Nil(t, err)
		assert.Nil(t, vPtr.TestValue)
	})
}

func TestGhost_EmptyValues(t *testing.T) {
	t.Run("StructField", func(t *testing.T) {
		v := fooGhost{TestValue: enum.Ghost{}}
		data, err := json.Marshal(v)
		require.NoError(t, err)
		assert.EqualValues(t, fmt.Sprintf(`{"Ghost":"%s"}`, v.TestValue.String()), string(data))

		v2 := fooGhost{}
		err = json.Unmarshal(data, &v2)
		require.NoError(t, err) // empty field

		v3 := fooGhost{}
		err = json.Unmarshal(data, &v3)
		require.NoError(t, err)
	})
	t.Run("PtrField", func(t *testing.T) {
		v := fooGhostPtr{TestValue: nil}
		data, err := json.Marshal(v)
		require.NoError(t, err)
		assert.EqualValues(t, fmt.Sprintf(`{"Ghost":%s}`, "null"), string(data))

		v2 := fooGhost{}
		err = json.Unmarshal(data, &v2)
		require.NoError(t, err) // empty field

		v3 := fooGhost{}
		err = json.Unmarshal(data, &v3)
		require.NoError(t, err)
	})
}

func TestGhost_ForEach(t *testing.T) {
	j := 0
	enum.EnumGhost.ForEach(func(i int, enumValue enum.Ghost) {
		j++
		value, found := enum.GhostFromValue(enumValue.String(), false)
		assert.True(t, found)
		assert.True(t, value == enumValue)
	})
	assert.EqualValues(t, enum.EnumGhost.Len(), j)
}
