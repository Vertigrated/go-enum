// Code generated by go generate; DO NOT EDIT.
// This file was generated at
// 2020-07-12T00:01:07-03:00
// by go-enum
package enum

import (
	"fmt"
)

/**
 *
 * init: register enum to the internal index
 *
 **/
//nolint:gochecknoinits // enum has to register itself for unmarshaling at runtime
func init() {
	if _, ok := enumIndex[thingKey]; ok {
		panic(fmt.Sprintf("enum: enumeration %s is already registered", thingKey))
	}
	enumIndex[thingKey] = thingValueIndex
}

/**
 *
 * Type aliases and declarations
 *
 **/
type Thing struct {
	stringEnumValue
}

func ThingFromValue(value string, ignoreCase bool) (Thing, bool) {
	result, found := fromValue(value, ignoreCase, thingKey)
	return Thing{result}, found
}

type thingList []Thing

// thingEnum is a type and memory safe iterable enumeration of Thing values
type thingEnum struct {
	thingList
}

func (e thingEnum) ForEach(f func(int, Thing)) {
	for i, e := range e.thingList {
		f(i, e)
	}
}

func (e thingEnum) Len() int {
	return len(e.thingList)
}

/**
 *
 * Private value index, key
 *
 **/
var (
	thingValueIndex = valueIndex{
		"Bar":  {},
		"Baz":  {},
		"Foo":  {},
		"Quux": {},
	}
	thingKey = "Thing"
)

/**
 *
 * Public enumeration
 *
 **/
var (
	ThingBar  = Thing{stringEnumValue{"Bar", thingKey}}
	ThingBaz  = Thing{stringEnumValue{"Baz", thingKey}}
	ThingFoo  = Thing{stringEnumValue{"Foo", thingKey}}
	ThingQuux = Thing{stringEnumValue{"Quux", thingKey}}

	EnumThing = thingEnum{thingList{
		ThingBar,
		ThingBaz,
		ThingFoo,
		ThingQuux,
	}}
)

/**
 *
 * Proxy methods for enum unmarshaling
 *
 **/
func (e *Thing) UnmarshalJSON(data []byte) error {
	e.key = thingKey
	return e.stringEnumValue.UnmarshalJSON(data)
}

func (e *Thing) UnmarshalText(text []byte) error {
	e.key = thingKey
	return e.stringEnumValue.UnmarshalText(text)
}

func (e *Thing) UnmarshalBSON(data []byte) error {
	e.key = thingKey
	return e.stringEnumValue.UnmarshalBSON(data)
}

func (e *Thing) UnmarshalBinary(data []byte) error {
	e.key = thingKey
	return e.stringEnumValue.UnmarshalBinary(data)
}

func (e *Thing) GobDecode(data []byte) error {
	e.key = thingKey
	return e.stringEnumValue.GobDecode(data)
}

func (e *Thing) Scan(raw interface{}) error {
	e.key = thingKey
	return e.stringEnumValue.Scan(raw)
}
